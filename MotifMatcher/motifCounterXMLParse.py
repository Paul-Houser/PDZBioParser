import operator
from lxml import etree as ET


def findMotifs(fileName):
    """Parses the xml output of motif file maker and generate a dictionary that has a list of the counts
    for the number of matches for each sequence"""
    motifRuningSum = {}
    tree = ET.parse(fileName)
    root = tree.getroot()
    # iterates through the reference sequences in the file
    for refSequence in root:
        
        refSequenceKey = refSequence.attrib['name']
        motifRuningSum[refSequenceKey] = []
        # iterate through the organisms for the given reference sequence
        for organism in refSequence :
            score = []
            # iterate through the matching sequences for the organism for the given reference sequence
            for matchscore in organism:
                # if there are matches count them if not append 0 to the score list
                if matchscore.text:
                    score.append(len(matchscore.text.split(",")))
                else:
                    score.append(0)
            
            motifRuningSum[refSequenceKey] .append({organism.attrib['name']:score})
    return motifRuningSum

def creatTSV(motifRuningSum, outFile):
    # generates the tsv file output summarizing the xml file generated by motif file maker
    # it unpacks the motifRuningSum dicitionary and makes a table
    with open(outFile,'w') as writeFile:
        # make header of the file
        for refSequence , organism in motifRuningSum.items():
            writeFile.write('\t')
            for key in organism:
                for motif in key:
                    writeFile.write(motif+'\t')
            writeFile.write('\n')
            break
        # fill in the remainder of the table
        for refSequence , organism in motifRuningSum.items():
            writeFile.write(refSequence+'\t')
            for key in organism:
                for motif in key:
                    writeFile.write(str(key[motif])[1:-1]+ "\t")
            writeFile.write('\n')
        
def generateOutput(fileName,outFile):
    creatTSV(findMotifs(fileName),outFile)
